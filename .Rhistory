# get vector of scaffolds
scaffold <- as.numeric(unlist(lapply(strsplit(vcf@fix[,1], "_"), '[[', 3)))
# get vector of bps
bp <- as.numeric(vcf@fix[,2])
# get vector of SNP IDs
snps <- vcf@fix[,3]
# create data frame
refData_m <- data.frame(snps, scaffold, bp)
refData_m$order <- 1:nrow(refData_m)
# sort refData by basepair, necessary necessary because of a bug in the stacks populations program
refData_m <- refData_m[order(refData_m$bp),]
#### STACKS
# read in Fst estimates from Stacks "populations" program
stacks_m = read.table("G:/NearLab/WCMW_ddRAD/Fst/stacks_Fst_males/m90p_w1000kb/WCMW_onlyWCMW_lake-river.males.2alleles.maf05.m90p.p.fst_river-lake.tsv",
header=TRUE) # detele hash at head of table before reading file
# reorder by basepair, this is necessary because of a bug in the stacks populations program
stacks_m <- stacks_m[order(stacks_m$BP),]
# add relevant stacks data to the refData
refData_m$Overall_Pi <- stacks_m$Overall_Pi
refData_m$AMOVA_Fst <- stacks_m$AMOVA_Fst
refData_m$Smoothed_AMOVA_Fst <- stacks_m$Smoothed_AMOVA_Fst
# first read in VCF file to get genomic positions
vcf_m <- read.vcfR("G:/NearLab/WCMW_ddRAD/ipyrad-0-9-68/vcfFiltering/onlyWCMW_HZAR_lake-river_males/WCMW_onlyWCMW_lake-river.males.2alleles.maf05.m90p.vcf") #only need to read vcf file to get snp geomic positions
# get vector of scaffolds
scaffold <- as.numeric(unlist(lapply(strsplit(vcf@fix[,1], "_"), '[[', 3)))
# get vector of bps
bp <- as.numeric(vcf@fix[,2])
# get vector of SNP IDs
snps <- vcf@fix[,3]
# create data frame
refData_m <- data.frame(snps, scaffold, bp)
refData_m$order <- 1:nrow(refData_m)
# get vector of scaffolds
scaffold <- as.numeric(unlist(lapply(strsplit(vcf_m@fix[,1], "_"), '[[', 3)))
# get vector of bps
bp <- as.numeric(vcf_m@fix[,2])
# get vector of SNP IDs
snps <- vcf_m@fix[,3]
# create data frame
refData_m <- data.frame(snps, scaffold, bp)
refData_m$order <- 1:nrow(refData_m)
# sort refData by basepair, necessary necessary because of a bug in the stacks populations program
refData_m <- refData_m[order(refData_m$bp),]
#### STACKS
# read in Fst estimates from Stacks "populations" program
stacks_m = read.table("G:/NearLab/WCMW_ddRAD/Fst/stacks_Fst_males/m90p_w1000kb/WCMW_onlyWCMW_lake-river.males.2alleles.maf05.m90p.p.fst_river-lake.tsv",
header=TRUE) # detele hash at head of table before reading file
# reorder by basepair, this is necessary because of a bug in the stacks populations program
stacks_m <- stacks_m[order(stacks_m$BP),]
# add relevant stacks data to the refData
refData_m$Overall_Pi <- stacks_m$Overall_Pi
refData_m$AMOVA_Fst <- stacks_m$AMOVA_Fst
refData_m$Smoothed_AMOVA_Fst <- stacks_m$Smoothed_AMOVA_Fst
# reorder refData to original order
refData_m <- refData_m[order(refData_m$order),]
#### Combine all data into one data frame
# get data frame of Eper scaffold and basepair position for
df_m <- data.frame(refData_m$scaffold, refData_m$bp, refData_m$Overall_Pi,
refData_m$AMOVA_Fst, refData_m$Smoothed_AMOVA_Fst)
colnames(df_m) <- c("Eper_scaffold", "bp", "pi", "stacks_Fst", "stacks_Fst_1000kb")
# add df_m columns of Pfla chromosomes
vlookup <- function(this, df_m, key, value) {
m <- match(this, df_m[[key]])
df_m[[value]][m]
}
df_m$Pfla_chrom <- sapply(df_m$Eper_scaffold, vlookup, df_m=d, key="originalScaffNumber", value="PflaNumMatch")
# sort the dataframe by Pfla chromosome, then by SNP base pair
df_m <- df_m[with(df_m, order(df_m$Pfla_chrom, df_m$bp)),]
# retain only first 24 chromosomes/scaffolds
df_m <- df_m[which(df_m$Eper_scaffold <= 25),]
#### split the dataframe into list of dataframes, one for each chromosone
split_df_m <- split(df_m, df_m$Pfla_chrom)
# create vector of relative chromosome lengths (compared to whole genome)
chromLens <- aggregate(d$bps, by=list(Category=d$PflaNumMatch), FUN=sum)
# keep only first 24 chromosomes
chromLens <- chromLens[1:24,]
colnames(chromLens) <- c("Pfla_chrom", "chromLen")
# calculate chrom length proportions
chromLens$chomProp <- chromLens$chromLen / sum(chromLens$chromLen)
# first read in VCF file to get genomic positions
vcf_f <- read.vcfR("G:/NearLab/WCMW_ddRAD/ipyrad-0-9-68/vcfFiltering/onlyWCMW_HZAR_lake-river_females/WCMW_onlyWCMW_lake-river.females.2alleles.maf05.m90p.vcf") #only need to read vcf file to get snp geomic positions
# get vector of scaffolds
scaffold <- as.numeric(unlist(lapply(strsplit(vcf_f@fix[,1], "_"), '[[', 3)))
# get vector of bps
bp <- as.numeric(vcf_f@fix[,2])
# get vector of SNP IDs
snps <- vcf_f@fix[,3]
# create data frame
refData_f <- data.frame(snps, scaffold, bp)
refData_f$order <- 1:nrow(refData_f)
# sort refData by basepair, necessary necessary because of a bug in the stacks populations program
refData_f <- refData_f[order(refData_f$bp),]
#### STACKS
# read in Fst estimates from Stacks "populations" program
stacks_m = read.table("G:/NearLab/WCMW_ddRAD/Fst/stacks_Fst_females/m90p_w1000kb/WCMW_onlyWCMW_lake-river.females.2alleles.maf05.m90p.p.fst_river-lake.tsv",
header=TRUE) # detele hash at head of table before reading file
# reorder by basepair, this is necessary because of a bug in the stacks populations program
stacks_m <- stacks_m[order(stacks_m$BP),]
# add relevant stacks data to the refData
refData_f$Overall_Pi <- stacks_m$Overall_Pi
#### STACKS
# read in Fst estimates from Stacks "populations" program
stacks_f = read.table("G:/NearLab/WCMW_ddRAD/Fst/stacks_Fst_females/m90p_w1000kb/WCMW_onlyWCMW_lake-river.females.2alleles.maf05.m90p.p.fst_river-lake.tsv",
header=TRUE) # detele hash at head of table before reading file
# reorder by basepair, this is necessary because of a bug in the stacks populations program
stacks_f <- stacks_f[order(stacks_f$BP),]
# add relevant stacks data to the refData
refData_f$Overall_Pi <- stacks_f$Overall_Pi
refData_f$AMOVA_Fst <- stacks_f$AMOVA_Fst
refData_f$Smoothed_AMOVA_Fst <- stacks_f$Smoothed_AMOVA_Fst
# reorder refData to original order
refData_f <- refData_f[order(refData_f$order),]
#### Combine all data into one data frame
# get data frame of Eper scaffold and basepair position for
df_f <- data.frame(refData_f$scaffold, refData_f$bp, refData_f$Overall_Pi,
refData_f$AMOVA_Fst, refData_f$Smoothed_AMOVA_Fst)
refData_f
# first read in VCF file to get genomic positions
vcf_f <- read.vcfR("G:/NearLab/WCMW_ddRAD/ipyrad-0-9-68/vcfFiltering/onlyWCMW_HZAR_lake-river_females/WCMW_onlyWCMW_lake-river.females.2alleles.maf05.m90p.vcf") #only need to read vcf file to get snp geomic positions
# get vector of scaffolds
scaffold <- as.numeric(unlist(lapply(strsplit(vcf_f@fix[,1], "_"), '[[', 3)))
# get vector of bps
bp <- as.numeric(vcf_f@fix[,2])
# get vector of SNP IDs
snps <- vcf_f@fix[,3]
# create data frame
refData_f <- data.frame(snps, scaffold, bp)
refData_f$order <- 1:nrow(refData_f)
# sort refData by basepair, necessary necessary because of a bug in the stacks populations program
refData_f <- refData_f[order(refData_f$bp),]
#### STACKS
# read in Fst estimates from Stacks "populations" program
stacks_f = read.table("G:/NearLab/WCMW_ddRAD/Fst/stacks_Fst_females/m90p_w1000kb/WCMW_onlyWCMW_lake-river.females.2alleles.maf05.m90p.p.fst_river-lake.tsv",
header=TRUE) # detele hash at head of table before reading file
# reorder by basepair, this is necessary because of a bug in the stacks populations program
stacks_f <- stacks_f[order(stacks_f$BP),]
#### STACKS
# read in Fst estimates from Stacks "populations" program
stacks_f = read.table("G:/NearLab/WCMW_ddRAD/Fst/stacks_Fst_females/m90p_w1000kb/WCMW_onlyWCMW_lake-river.females.2alleles.maf05.m90p.p.fst_river-lake.tsv",
header=TRUE) # detele hash at head of table before reading file
# reorder by basepair, this is necessary because of a bug in the stacks populations program
stacks_f <- stacks_f[order(stacks_f$BP),]
# add relevant stacks data to the refData
refData_f$Overall_Pi <- stacks_f$Overall_Pi
refData_f$AMOVA_Fst <- stacks_f$AMOVA_Fst
refData_f$Smoothed_AMOVA_Fst <- stacks_f$Smoothed_AMOVA_Fst
# reorder refData to original order
refData_f <- refData_f[order(refData_f$order),]
#### Combine all data into one data frame
# get data frame of Eper scaffold and basepair position for
df_f <- data.frame(refData_f$scaffold, refData_f$bp, refData_f$Overall_Pi,
refData_f$AMOVA_Fst, refData_f$Smoothed_AMOVA_Fst)
colnames(df_f) <- c("Eper_scaffold", "bp", "pi", "stacks_Fst", "stacks_Fst_1000kb")
# add df_f columns of Pfla chromosomes
vlookup <- function(this, df_f, key, value) {
m <- match(this, df_f[[key]])
df_f[[value]][m]
}
df_f$Pfla_chrom <- sapply(df_f$Eper_scaffold, vlookup, df_f=d, key="originalScaffNumber", value="PflaNumMatch")
# sort the dataframe by Pfla chromosome, then by SNP base pair
df_f <- df_f[with(df_f, order(df_f$Pfla_chrom, df_f$bp)),]
# retain only first 24 chromosomes/scaffolds
df_f <- df_f[which(df_f$Eper_scaffold <= 25),]
#### split the dataframe into list of dataframes, one for each chromosone
split_df_f <- split(df_f, df_f$Pfla_chrom)
vcf_m <- read.vcfR("G:/NearLab/WCMW_ddRAD/ipyrad-0-9-68/vcfFiltering/onlyWCMW_HZAR_lake-river_males/WCMW_onlyWCMW_lake-river.males.2alleles.maf05.m90p.vcf") #only need to read vcf file to get snp geomic positions
# get vector of scaffolds
scaffold <- as.numeric(unlist(lapply(strsplit(vcf_m@fix[,1], "_"), '[[', 3)))
# get vector of bps
bp <- as.numeric(vcf_m@fix[,2])
# get vector of SNP IDs
snps <- vcf_m@fix[,3]
# create data frame
refData_m <- data.frame(snps, scaffold, bp)
refData_m$order <- 1:nrow(refData_m)
# sort refData by basepair, necessary necessary because of a bug in the stacks populations program
refData_m <- refData_m[order(refData_m$bp),]
#### STACKS
# read in Fst estimates from Stacks "populations" program
stacks_m = read.table("G:/NearLab/WCMW_ddRAD/Fst/stacks_Fst_males/m90p_w1000kb/WCMW_onlyWCMW_lake-river.males.2alleles.maf05.m90p.p.fst_river-lake.tsv",
header=TRUE) # detele hash at head of table before reading file
# reorder by basepair, this is necessary because of a bug in the stacks populations program
stacks_m <- stacks_m[order(stacks_m$BP),]
# add relevant stacks data to the refData
refData_m$Overall_Pi <- stacks_m$Overall_Pi
refData_m$AMOVA_Fst <- stacks_m$AMOVA_Fst
refData_m$Smoothed_AMOVA_Fst <- stacks_m$Smoothed_AMOVA_Fst
# reorder refData to original order
refData_m <- refData_m[order(refData_m$order),]
#### Combine all data into one data frame
# get data frame of Eper scaffold and basepair position for
df_m <- data.frame(refData_m$scaffold, refData_m$bp, refData_m$Overall_Pi,
refData_m$AMOVA_Fst, refData_m$Smoothed_AMOVA_Fst)
colnames(df_m) <- c("Eper_scaffold", "bp", "pi", "stacks_Fst", "stacks_Fst_1000kb")
# add df_m columns of Pfla chromosomes
vlookup <- function(this, df_m, key, value) {
m <- match(this, df_m[[key]])
df_m[[value]][m]
}
df_m$Pfla_chrom <- sapply(df_m$Eper_scaffold, vlookup, df_m=d, key="originalScaffNumber", value="PflaNumMatch")
# sort the dataframe by Pfla chromosome, then by SNP base pair
df_m <- df_m[with(df_m, order(df_m$Pfla_chrom, df_m$bp)),]
# retain only first 24 chromosomes/scaffolds
df_m <- df_m[which(df_m$Eper_scaffold <= 25),]
#### split the dataframe into list of dataframes, one for each chromosone
split_df_m <- split(df_m, df_m$Pfla_chrom)
# create vector of relative chromosome lengths (compared to whole genome)
chromLens <- aggregate(d$bps, by=list(Category=d$PflaNumMatch), FUN=sum)
# keep only first 24 chromosomes
chromLens <- chromLens[1:24,]
colnames(chromLens) <- c("Pfla_chrom", "chromLen")
# calculate chrom length proportions
chromLens$chomProp <- chromLens$chromLen / sum(chromLens$chromLen)
# function to plot Fst for each chromosome
plot_Fst_chromosome <- function(data, FstColumn){
ggplot(data, aes_string(x="genome_pos", y=FstColumn)) +
geom_point(size=1, pch=3, alpha=0.3, color="#000000") +
xlab(data$Espe_chrom[1]) +
ylim(c(0,1)) +
ylab("Fst") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "cm"),
legend.position = "none")
}
# apply Fst plot function to list of SNP dataframes by chromosome
plots_Fst <- list()
for(i in 1:length(split_df)){
plots_Fst[[i]] <- plot_Fst_chromosome(data=split_df[[i]], FstColumn="stacks_Fst")
}
plots_Fst_m <- list()
for(i in 1:length(split_df)){
plots_Fst_m[[i]] <- plot_Fst_chromosome(data=split_df_m[[i]], FstColumn="stacks_Fst")
}
plots_Fst_f <- list()
for(i in 1:length(split_df)){
plots_Fst_f[[i]] <- plot_Fst_chromosome(data=split_df_f[[i]], FstColumn="stacks_Fst")
}
# combine all plot lists
plots <- c(plots_Fst, plots_Fst_m, plots_Fst_f)
# make backgroud gray for every other plot
# assumes you have an even number of chromosomes
mod=FALSE
for(i in 1:length(plots)){
if(mod){
plots[[i]] <- plots[[i]] + theme(panel.background = element_rect(fill = "#e3e3e3", color="#e3e3e3"))
mod=FALSE
} else {
mod=TRUE
}
}
# combine plots into a single multipanel plot
# width of each plot is proportional to chromosome size
svglite("./plots/FstSexComparison.svg", width=11, height=5)
plot_grid(plotlist = plots, nrow=3, ncol=24, rel_widths=chromLens$chomProp)
dev.off()
pdf("./plots/FstSexComparison.pdf", width=11, height=5)
plot_grid(plotlist = plots, nrow=3, ncol=24, rel_widths=chromLens$chomProp)
dev.off()
# make temporary plot
# only used to get y-axis in Illustrator
# function to plot each chromosome
# function to plot Fst for each chromosome
plot_Fst_chromosome_yaxis <- function(data, FstColumn){
ggplot(data, aes_string(x="genome_pos", y=FstColumn)) +
xlab(data$Espe_chrom[1]) +
ylim(c(0,1)) +
ylab("Fst") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.x = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "cm"),
legend.position = "none")
}
# apply Fst plot function to list of SNP dataframes by chromosome
plots_Fst_yaxis <- list()
for(i in 1:length(split_df)){
plots_Fst_yaxis[[i]] <- plot_Fst_chromosome_yaxis(data=split_df[[i]], FstColumn="stacks_Fst")
}
plots_Fst_m_yaxis <- list()
for(i in 1:length(split_df)){
plots_Fst_m_yaxis[[i]] <- plot_Fst_chromosome_yaxis(data=split_df_m[[i]], FstColumn="stacks_Fst")
}
plots_Fst_f_yaxis <- list()
for(i in 1:length(split_df)){
plots_Fst_f_yaxis[[i]] <- plot_Fst_chromosome_yaxis(data=split_df_f[[i]], FstColumn="stacks_Fst")
}
# combine all plot lists
plots_yaxis <- c(plots_Fst_yaxis, plots_Fst_m_yaxis, plots_Fst_f_yaxis)
# combine plots into a single multipanel plot
# width of each plot is proportional to chromosome size
svglite("./plots/FstSexComparison_yAxis.svg", width=11, height=5)
plot_grid(plotlist = plots_yaxis, nrow=3, ncol=24, rel_widths=chromLens$chomProp)
dev.off()
pdf("./plots/FstSexComparison_yAxis.pdf", width=11, height=5)
plot_grid(plotlist = plots_yaxis, nrow=3, ncol=24, rel_widths=chromLens$chomProp)
dev.off()
# function to plot Fst for each chromosome
plot_Fst_chromosome <- function(data, slideData, FstColumn, FstSmoothColumn){
ggplot(data, aes_string(x="bp", y=FstColumn)) +
geom_point(data=subset(data, outlier_sum == "0"), size=1, pch=3, alpha=0.3, color="#999999") +
geom_line(data=slideData, aes_string(x="mid", y = FstSmoothColumn), color="black", size=0.6, alpha=0.5) +
geom_point(data=subset(data, outlier_sum == "1"), aes_string(x="bp", y=FstColumn), size=1.2, pch=20, alpha=0.7, color="#009E73") +
geom_point(data=subset(data, outlier_sum == "2"), size=1.2, pch=20, alpha=0.7, color="#E69F00") +
geom_point(data=subset(data, outlier_sum == "3"), size=1.2, pch=20, alpha=0.7, color="#000000") +
xlab(data$Pfla_chrom[1]) +
ylim(c(0,1)) +
ylab("Fst") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "cm"),
legend.position = "none")
}
# apply Fst plot function to list of SNP dataframes by chromosome
plots_Fst <- list()
for(i in 1:length(split_df)){
plots_Fst[[i]] <- plot_Fst_chromosome(data=split_df[[i]], FstColumn="stacks_Fst")
}
plots_Fst_m <- list()
# function to plot Fst for each chromosome
plot_Fst_chromosome <- function(data, slideData, FstColumn, FstSmoothColumn){
ggplot(data, aes_string(x="bp", y=FstColumn)) +
geom_point(size=1, pch=3, alpha=0.3, color="#000000") +
xlab(data$Pfla_chrom[1]) +
ylim(c(0,1)) +
ylab("Fst") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "cm"),
legend.position = "none")
}
# apply Fst plot function to list of SNP dataframes by chromosome
plots_Fst <- list()
for(i in 1:length(split_df)){
plots_Fst[[i]] <- plot_Fst_chromosome(data=split_df[[i]], FstColumn="stacks_Fst")
}
plots_Fst_m <- list()
for(i in 1:length(split_df)){
plots_Fst_m[[i]] <- plot_Fst_chromosome(data=split_df_m[[i]], FstColumn="stacks_Fst")
}
plots_Fst_f <- list()
for(i in 1:length(split_df)){
plots_Fst_f[[i]] <- plot_Fst_chromosome(data=split_df_f[[i]], FstColumn="stacks_Fst")
}
# combine all plot lists
plots <- c(plots_Fst, plots_Fst_m, plots_Fst_f)
# make backgroud gray for every other plot
# assumes you have an even number of chromosomes
mod=FALSE
for(i in 1:length(plots)){
if(mod){
plots[[i]] <- plots[[i]] + theme(panel.background = element_rect(fill = "#e3e3e3", color="#e3e3e3"))
mod=FALSE
} else {
mod=TRUE
}
}
# combine plots into a single multipanel plot
# width of each plot is proportional to chromosome size
svglite("./plots/FstSexComparison.svg", width=11, height=5)
plot_grid(plotlist = plots, nrow=3, ncol=24, rel_widths=chromLens$chomProp)
dev.off()
pdf("./plots/FstSexComparison.pdf", width=11, height=5)
plot_grid(plotlist = plots, nrow=3, ncol=24, rel_widths=chromLens$chomProp)
dev.off()
for(i in 1:length(glacialShapefileName)){
# read in and process glacial data
# data from https://www.sciencedirect.com/science/article/abs/pii/S0277379119307619, appexdix C
glacier <- readOGR(paste(wd, "/data/Dalton_etAl_2020_QuatSci_NAGlaciers/", glacialShapefileName[i], sep=""))
glacier_sf <- st_as_sf(glacier)
# get shoreline for the historical time period
time <- as.numeric(glacialTime[i])
sl <- sea_level$esl_m[which.min(abs(sea_level$time_ka-time))] # get the sea level for the closest time point in dataset
sl <- sl * 3.28084 # convert to feet
# prep bathymetry data
bathymetry_df <- as.data.frame(bathymetry, xy=TRUE) # convert to data frame
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- bathymetry_df$BathymetryDepthMean_arcgis_reproj * 3.28084 # convert to feet
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- bathymetry_df$BathymetryDepthMean_arcgis_reproj - sl # adjust sea level for given time point
bathymetry_df$BathymetryDepthMean_arcgis_reproj[bathymetry_df$BathymetryDepthMean_arcgis_reproj >= 0] <- NA # NA for cells with sea level > 0
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- -(bathymetry_df$BathymetryDepthMean_arcgis_reproj) # convert depth to positive values for plotting
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- bathymetry_df$BathymetryDepthMean_arcgis_reproj / 5280 # convert depth to miles for plotting
# make plot
plot <- ggplot() +
geom_raster(bathymetry_df, mapping = aes(x = x, y = y, fill=BathymetryDepthMean_arcgis_reproj)) +
scale_fill_gradient(na.value="gray20", low="#000d42", high="#328aa8", name="ocean\ndepth\n(miles)",
labels = c("0", "2", "4", "6", "8", "10"),
breaks = c(0, 2000, 4000, 6000, 8000, 10000),
trans = 'reverse') +
geom_sf(data=borders_sf, fill="black", color=NA, size=0.2) +
geom_sf(data=rivers_sf, color="#36c3ff", lineend = "round", aes(size=factor(strokeweig)), show.legend = FALSE,) +
geom_sf(data=lakes_sf, fill="#36c3ff", color=NA) +
geom_sf(data=glacier_sf, fill=alpha("white", 0.7), color="white", size=1) +
scale_size_manual(values=seq(0.1,20,by=0.05)) +
labs(title = paste(glacialTime_title[i], " years before present", sep="")) +
annotate("text", x=long, y=lat, label=paste("sea level ", formatC(signif(-sl, 4), format='f', digits=1), " feet\nlower than present-day", sep=""),
color="white", hjust=0.5, vjust=0.5, size=5) +
coord_sf(crs = projection, xlim = c(b["xmin"], b["xmax"]), ylim = c(b["ymin"], b["ymax"])) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.7),
panel.background = element_rect(fill = "#1c5163"),
plot.title = element_text(color = "black", size = 24, hjust = 0.5),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank())
# save each individual plot
ggsave(paste(wd, "/plots/calibratedDates_seaLevel_imperial/", glacialTime_file[i], ".png", sep=""), plot=plot, units = "in", dpi=300, height=7, width=8)
}
wd <- "H:/NAGlacialFront/NorthAmericaLGMIceRetreat" # top level working directory
setwd(wd)
for(i in 1:length(glacialShapefileName)){
# read in and process glacial data
# data from https://www.sciencedirect.com/science/article/abs/pii/S0277379119307619, appexdix C
glacier <- readOGR(paste(wd, "/data/Dalton_etAl_2020_QuatSci_NAGlaciers/", glacialShapefileName[i], sep=""))
glacier_sf <- st_as_sf(glacier)
# get shoreline for the historical time period
time <- as.numeric(glacialTime[i])
sl <- sea_level$esl_m[which.min(abs(sea_level$time_ka-time))] # get the sea level for the closest time point in dataset
sl <- sl * 3.28084 # convert to feet
# prep bathymetry data
bathymetry_df <- as.data.frame(bathymetry, xy=TRUE) # convert to data frame
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- bathymetry_df$BathymetryDepthMean_arcgis_reproj * 3.28084 # convert to feet
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- bathymetry_df$BathymetryDepthMean_arcgis_reproj - sl # adjust sea level for given time point
bathymetry_df$BathymetryDepthMean_arcgis_reproj[bathymetry_df$BathymetryDepthMean_arcgis_reproj >= 0] <- NA # NA for cells with sea level > 0
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- -(bathymetry_df$BathymetryDepthMean_arcgis_reproj) # convert depth to positive values for plotting
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- bathymetry_df$BathymetryDepthMean_arcgis_reproj / 5280 # convert depth to miles for plotting
# make plot
plot <- ggplot() +
geom_raster(bathymetry_df, mapping = aes(x = x, y = y, fill=BathymetryDepthMean_arcgis_reproj)) +
scale_fill_gradient(na.value="gray20", low="#000d42", high="#328aa8", name="ocean\ndepth\n(miles)",
labels = c("0", "2", "4", "6", "8", "10"),
breaks = c(0, 2000, 4000, 6000, 8000, 10000),
trans = 'reverse') +
geom_sf(data=borders_sf, fill="black", color=NA, size=0.2) +
geom_sf(data=rivers_sf, color="#36c3ff", lineend = "round", aes(size=factor(strokeweig)), show.legend = FALSE,) +
geom_sf(data=lakes_sf, fill="#36c3ff", color=NA) +
geom_sf(data=glacier_sf, fill=alpha("white", 0.7), color="white", size=1) +
scale_size_manual(values=seq(0.1,20,by=0.05)) +
labs(title = paste(glacialTime_title[i], " years before present", sep="")) +
annotate("text", x=long, y=lat, label=paste("sea level ", formatC(signif(-sl, 4), format='f', digits=1), " feet\nlower than present-day", sep=""),
color="white", hjust=0.5, vjust=0.5, size=5) +
coord_sf(crs = projection, xlim = c(b["xmin"], b["xmax"]), ylim = c(b["ymin"], b["ymax"])) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.7),
panel.background = element_rect(fill = "#1c5163"),
plot.title = element_text(color = "black", size = 24, hjust = 0.5),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank())
# save each individual plot
ggsave(paste(wd, "/plots/calibratedDates_seaLevel_imperial/", glacialTime_file[i], ".png", sep=""), plot=plot, units = "in", dpi=300, height=7, width=8)
}
max(bathymetry_df$BathymetryDepthMean_arcgis_reproj na.rm=T)
max(bathymetry_df$BathymetryDepthMean_arcgis_reproj, na.rm=T)
for(i in 1:length(glacialShapefileName)){
# read in and process glacial data
# data from https://www.sciencedirect.com/science/article/abs/pii/S0277379119307619, appexdix C
glacier <- readOGR(paste(wd, "/data/Dalton_etAl_2020_QuatSci_NAGlaciers/", glacialShapefileName[i], sep=""))
glacier_sf <- st_as_sf(glacier)
# get shoreline for the historical time period
time <- as.numeric(glacialTime[i])
sl <- sea_level$esl_m[which.min(abs(sea_level$time_ka-time))] # get the sea level for the closest time point in dataset
sl <- sl * 3.28084 # convert to feet
# prep bathymetry data
bathymetry_df <- as.data.frame(bathymetry, xy=TRUE) # convert to data frame
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- bathymetry_df$BathymetryDepthMean_arcgis_reproj * 3.28084 # convert to feet
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- bathymetry_df$BathymetryDepthMean_arcgis_reproj - sl # adjust sea level for given time point
bathymetry_df$BathymetryDepthMean_arcgis_reproj[bathymetry_df$BathymetryDepthMean_arcgis_reproj >= 0] <- NA # NA for cells with sea level > 0
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- -(bathymetry_df$BathymetryDepthMean_arcgis_reproj) # convert depth to positive values for plotting
bathymetry_df$BathymetryDepthMean_arcgis_reproj <- bathymetry_df$BathymetryDepthMean_arcgis_reproj / 5280 # convert depth to miles for plotting
# make plot
plot <- ggplot() +
geom_raster(bathymetry_df, mapping = aes(x = x, y = y, fill=BathymetryDepthMean_arcgis_reproj)) +
scale_fill_gradient(na.value="gray20", low="#000d42", high="#328aa8", name="ocean\ndepth\n(miles)",
breaks = c(0, 1, 2, 3, 4, 5, 6, 7),
trans = 'reverse') +
geom_sf(data=borders_sf, fill="black", color=NA, size=0.2) +
geom_sf(data=rivers_sf, color="#36c3ff", lineend = "round", aes(size=factor(strokeweig)), show.legend = FALSE,) +
geom_sf(data=lakes_sf, fill="#36c3ff", color=NA) +
geom_sf(data=glacier_sf, fill=alpha("white", 0.7), color="white", size=1) +
scale_size_manual(values=seq(0.1,20,by=0.05)) +
labs(title = paste(glacialTime_title[i], " years before present", sep="")) +
annotate("text", x=long, y=lat, label=paste("sea level ", formatC(signif(-sl, 4), format='f', digits=1), " feet\nlower than present-day", sep=""),
color="white", hjust=0.5, vjust=0.5, size=5) +
coord_sf(crs = projection, xlim = c(b["xmin"], b["xmax"]), ylim = c(b["ymin"], b["ymax"])) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.7),
panel.background = element_rect(fill = "#1c5163"),
plot.title = element_text(color = "black", size = 24, hjust = 0.5),
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank())
# save each individual plot
ggsave(paste(wd, "/plots/calibratedDates_seaLevel_imperial/", glacialTime_file[i], ".png", sep=""), plot=plot, units = "in", dpi=300, height=7, width=8)
}
